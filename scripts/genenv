#!/usr/bin/python2.7

# Eval the output of this file with your shell in order to find the correct
# tooling on OS X.
#
#     eval "$(./env)"
#

from __future__ import print_function
import argparse
import os
from os.path import join
import sys
from pipes import quote as shquote
import subprocess

arg_parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description='''\
Generate a shell environment to find the necessary tools on OS X.

Eval the output of this file in your shell:

    eval "$(%(prog)s)"
''')
arg_parser.parse_args()

LLVM_VERSION_TUPLE = ('3', '5', '1')


def log(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def brew(*args):
    return subprocess.check_output(['brew'] + list(args)).rstrip()


class PathManipulator(object):
    VARS = ['PATH', 'MANPATH', 'INFOPATH']

    def __init__(self):
        self._paths = {}
        for var in self.VARS:
            try:
                value = os.environ[var].split(os.pathsep)
            except KeyError:
                value = []
            else:
                self._paths[var] = value

    def prepend(self, var, path):
        if os.path.isdir(path):
            log('Prepending to {}: {}'.format(var, path))
            self._paths[var].insert(0, path)
        else:
            log('Skipped prepending {}: {}'.format(var, path))

    def prepend_hierarchy(self, prefix):
        for sub in ['bin', 'sbin']:
            self.prepend('PATH', join(prefix, sub))
        for sub in ['man', join('share', 'man')]:
            self.prepend('MANPATH', join(prefix, sub))
        self.prepend('INFOPATH', join(prefix, 'share', 'info'))

    def __str__(self):
        return '\n'.join(
            'export {}={}'.format(var, shquote(os.pathsep.join(value)))
            for var, value in self._paths.iteritems())


path_manip = PathManipulator()
for tool in ['flex', 'bison']:
    path_manip.prepend_hierarchy(brew('--prefix', tool))

print(path_manip)
